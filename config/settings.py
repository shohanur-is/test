"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from decouple import config


# Base directory path of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# ----------- SECURITY -----------

# Secret key for cryptographic signing (use a .env variable for production)
SECRET_KEY = config('DJANGO_SECRET_KEY', 'fallback-secret-key')  # Fallback secret key for safety
DEBUG = False  # Default to False, can be overridden in development/production
# run with set DJANGO_ENV=dev


# from env
ALLOWED_HOSTS = config('ALLOWED_HOSTS', 'localhost').split(',')
INTERNAL_IPS = config('INTERNAL_IPS', '127.0.0.1').split(',')
# ----------- CORS SETTINGS -----------
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', 'http://localhost:3000').split(',')


# ----------- APPLICATION SETUP -----------

# Applications installed in the project
INSTALLED_APPS = [
    # Default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Third-party apps
INSTALLED_APPS += [
    'corsheaders',  # Cross-Origin Resource Sharing headers
    'drf_spectacular',  # OpenAPI documentation for Django REST Framework
    'rest_framework',  # Django REST Framework
    'rest_framework.authtoken',  # Token authentication (optional)
    'dj_rest_auth',  # Django Rest Auth for authentication endpoints
    'dj_rest_auth.registration',  # For user registration
    'rest_framework_simplejwt.token_blacklist',  # JWT token blacklist for revocation
    'allauth',  # Django Allauth for authentication
    'allauth.account',  # Allauth account management
    'allauth.socialaccount',  # Social account authentication (Google, Facebook, etc.)
]

# Local apps
INSTALLED_APPS += [
    'apps.auth_app',  # Custom authentication app
    'apps.core',  # Core application
]

# Custom user model
AUTH_USER_MODEL = 'auth_app.User'

# ROLE USAGE SETTING
USE_ROLE = True 

# ----------- CORS SETTINGS -----------

# Allow specific headers in CORS requests
CORS_ALLOW_HEADERS = [
    "accept", "accept-encoding", "authorization", "content-type", "dnt", 
    "origin", "user-agent", "x-csrftoken", "x-requested-with"
]

# Allow credentials in CORS requests
CORS_ALLOW_CREDENTIALS = True

# ----------- REST FRAMEWORK SETTINGS -----------

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # For OpenAPI schema generation
}

# SimpleJWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Access token lifespan
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Refresh token lifespan
    'ROTATE_REFRESH_TOKENS': True,  # Rotate refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist tokens after rotation
    'ALGORITHM': 'HS256',  # JWT algorithm
    'SIGNING_KEY': SECRET_KEY,  # Secret key for signing JWT tokens
    'AUTH_HEADER_TYPES': ('Bearer',),  # Authorization header format
}

# ----------- DJ-REST-AUTH SETTINGS -----------

REST_AUTH = {
    "USE_JWT": True,  # Use JWT for authentication
    'USER_DETAILS_SERIALIZER': 'apps.auth_app.serializers.UserResponseSerializer',  # Custom serializer
    'LOGIN_SERIALIZER': 'apps.auth_app.serializers.CustomLoginSerializer',  # Custom login serializer
    'REGISTER_SERIALIZER': 'apps.auth_app.serializers.CustomRegisterSerializer',  # Custom register serializer
}

# ----------- ACCOUNT SETTINGS (Django Allauth) -----------

ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Email verification required for all accounts
ACCOUNT_EMAIL_REQUIRED = True  # Email is required for account registration
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Login by email only
ACCOUNT_USERNAME_REQUIRED = False  # Disable username field

# Override default username field in user model
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

# ----------- AUTHENTICATION BACKENDS -----------

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default authentication backend
    'allauth.account.auth_backends.AuthenticationBackend',  # Allauth authentication backend
]

# ----------- MIDDLEWARE SETTINGS -----------

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.security.SecurityMiddleware',  # Security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session middleware
    'allauth.account.middleware.AccountMiddleware',  # Allauth middleware
    'django.middleware.common.CommonMiddleware',  # Common middleware
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware',  # Message middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

# ----------- URL CONFIGURATION -----------

ROOT_URLCONF = 'config.urls'

# ----------- TEMPLATE SETTINGS -----------

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Template directory
        'APP_DIRS': True,  # Load app-specific templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'config.wsgi.application'

# ----------- PASSWORD VALIDATION -----------

# Password validators to improve security
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ----------- INTERNATIONALIZATION -----------

LANGUAGE_CODE = 'en-us'  # Language code
TIME_ZONE = 'UTC'  # Timezone
USE_I18N = True  # Internationalization enabled
USE_TZ = True  # Timezone support enabled

# ----------- STATIC & MEDIA FILES -----------

STATIC_URL = 'static/'  # URL for static files
STATICFILES_DIRS = [BASE_DIR / 'static']  # Directories for static files
MEDIA_URL = '/media/'  # URL for media files
MEDIA_ROOT = BASE_DIR / 'media'  # Root directory for media files
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Directory for collected static files

# Ensure logs directory exists
LOG_DIR = BASE_DIR / 'logs'
os.makedirs(LOG_DIR, exist_ok=True)  # Create logs directory if not exists

# ----------- DATABASE SETTINGS -----------

# Database settings can be added here (default is SQLite)

# ----------- DEFAULT AUTO FIELD -----------

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Default field type for auto-incrementing fields
